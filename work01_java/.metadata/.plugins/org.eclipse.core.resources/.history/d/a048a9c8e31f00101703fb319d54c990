package com.edu.test;

import com.edu.child.Engineer;
import com.edu.child.Manager;
import com.edu.child.Secretary;
import com.edu.parent.Employee;
import com.edu.util.MyDate;

/*
 	배열은 여러개의 데이터를 저장할 수 있는 일정의 Collection 이다.
 	클래스가 제공되지 않기 떄문에 특정한 데이터를 저장, 삭제 수정, 가져올때마다
 	직접 기능을 만들어야 하는 번거로움이 있다.
 	
 	또한 배열의 특징으로
 	1) ReSizing이 안됨 -- 사이즈가 변경되면 새로운 배열이 만들어짐
 	2) Same Data Type -- Data Type이 동일한 서로다른 값들을 저장
 		Homegeneous Collection  (동종간의 집합체)
 		
 	상속 기술이 적용되는 순간 이기종간의 집합체가 가능하다
 	Heterogeneous Collection이 만들어 진다.
 	
 					Employee
 						|
 		
 		Manager		Engineer	Secretary
 	
 	상속을 하기 전에는 각 클래스타입 배열에 정보를 담았다.
 	Manager[] managers
 	Engineer[] engineers
 	Secretary[] secretaries
 	
 	상속을 하게 되면 부모클래스타입 배열에 자식클래스타입을 다 담을수 있다.
 	Employee[ ] employees 
 	
 	Heterogeneous Collection은 여러개의 자식객체들을 단일하게 관리할 수 있다.
 */
public class HeterogenousCollectionTest1 {

	public static void main(String[] args) {
		//이기종간의 집합체... Same Data Type이 무너짐
		Employee[] employees = { 
				new Manager(111, "김관식", 34000.0, new MyDate(1975, 10, 20), "기획부"),
				new Manager(222, "박해일", 24000.0, new MyDate(1984, 10, 20), "기획부"),
				new Engineer(333, "아이유", 54000.0, new MyDate(1999, 1, 12), "Java", 300),
				new Engineer(444, "James", 34000.0, new MyDate(1990, 3, 20), "Python", 200),
				new Secretary(555, "김두식", 30000.0, new MyDate(1999, 4, 21), "James") 
		};
		
		System.out.println(employees);
		/*
		 Virtual Method Invocation 원리
		 컴파일 시점 --- 부모의 메소드 호출
		 실행 시점 --- 자식 메소드 호출 
		 */
		for(Employee e : employees) {
			System.out.println(e);
		}
	}

}
